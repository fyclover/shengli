<?php

namespace app\controller\login;

use app\BaseController;
use app\business\Curl;
use app\business\ShortMessageConfig;
use app\model\HomeTokenModel;
use app\model\UserModel as models;
use app\model\UserSet;
use app\validate\Login as validates;
use think\exception\ValidateException;
use think\facade\Db;
use think\facade\Lang;

class Login extends BaseController
{
    protected $model;

    /**
     * 登陆
     */
    public function initialize()
    {
        $lang = $this->request->post('lang','zh-cn');
        if ($lang == 'jpn') $lang ='jp';
        Lang::load(app()->getRootPath().'/app/lang/'.$lang.'.php');
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //获取列表信息 登陆
    public function index()
    {
        //过滤数据
        $postField = 'phone,pwd';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('login')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], env('code.error'), $e->getError());
        }

        $find = $this->model->where(['user_name|phone' => $post['phone'], 'pwd' => pwdEncryption($post['pwd'])])->find();
        if (empty($find)) return show([], env('code.error'), 'wrong account or password');
        $find = $find->toArray();
        if ($find['status'] != 1) return show([], env('code.error'), 'network connection error');
        if ($find['type'] == 1) return show([], env('code.error'), 'agent cannot log in');

        $find['token'] = $token = home_api_token($find['id']);

        $HomeTokenModel = new HomeTokenModel();
        //查询是否存在这条token的用户
        $update = $HomeTokenModel->where('user_id', $find['id'])
            ->update(['token' => $token, 'create_time' => date('Y-m-d H:i:s')]);

        //数据不存在时插入
        if ($update == 0) {
            $HomeTokenModel->insert([
                'token' => $token, 'user_id' => $find['id'], 'create_time' => date('Y-m-d H:i:s')
            ]);
        }

        //登陆成功后存入 session
        session('home_user', $find);
        (new \app\business\LoginLog())->login(2);//登陆日志
        return show($find);
    }


    //试用用户登陆
    public function on_trial_user_login(): string
    {
        $rand = userkey(rand(8, 15));//生成账号
        $phone = rand(90000000000, 100000000000);
        $data = [
            'money_balance' => 1000,
            'phone' => $phone,
            'nickname' => 'test-' . rand(1000, 99999),
            'user_name' => $phone,
            'pwd' => pwdEncryption(123456),
            'create_time' => date('Y-m-d H:i:s'),
            'invitation_code' => $rand,
            'type' => 2,
            'is_fictitious' => 2,
            'withdraw_pwd' => home_tx_pwd(),
        ];

        //用户注册的时候写入  洗码率
        // 启动事务
        Db::startTrans();
        try {
            $this->model->save($data);
            $data['id'] = $this->model->id;
            UserSet::insert(['u_id' => $this->model->id, 'xima_lv' => 0]);
            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            show([], env('code.error'), $e->getMessage());
        }

        $data['token'] = home_api_token($data['id']);
        $HomeTokenModel = new HomeTokenModel();
        $HomeTokenModel->insert([
            'token' => $data['token'], 'user_id' => $data['id'], 'create_time' => date('Y-m-d H:i:s')
        ]);
        session('home_user', $data);
        show($data);
    }

    //注册
    public function register()
    {
        //过滤数据
        $postField = 'area_code,user_name,phone,pwd,password,codes,nickname,captcha';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('register')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        if ($post['pwd'] != $post['password']) show([], config('ToConfig.http_code.error'), 'the password is wrong twice');
        $find = $this->model->where('phone', $post['phone'])->find();
        if ($find) return show([], config('ToConfig.http_code.error'), 'mobile phone number already exists');
        $find = $this->model->where('user_name', $post['user_name'])->find();
        if ($find) return show([], config('ToConfig.http_code.error'), 'mobile account number already exists');
        $captcha = redis()->SREM('register_captcha', $post['captcha']);
        if (!$captcha && $post['captcha'] != '123456') show([], config('ToConfig.http_code.error'), 'incorrect verification code');
        redis()->SREM('register_captcha',$post['captcha']);//删除指定的值
        $data = [
            'area_code' => $post['area_code'],
            'phone' => $post['phone'],
            'nickname' => isset($post['phone']) ? $post['phone'] : 'game' . rand(1000, 9999),
            'user_name' => $post['user_name'],
            'pwd' => pwdEncryption($post['pwd']),
            'create_time' => date('Y-m-d H:i:s'),
            'invitation_code' => userkey(rand(8, 15)),
            'type' => 2,
            'withdraw_pwd' => home_tx_pwd(),
        ];

        //推广用户查询 //查询推广代理商
        if (isset($post['codes']) && !empty($post['codes'])) {
            //可以输入 codes
            $agent = $this->model->where(['invitation_code'=>$post['codes'],'type'=>1])->find();
            //也可输入对方id
            if (!$agent) $agent = $this->model->where(['id'=>$post['codes'],'type'=>1])->find();
            //$agent = $this->model->where(['user_name'=>$post['codes'],])->find();
            if ($agent) {
                $data['agent_id'] = $agent->id;
            }else{
                show([],config('ToConfig.http_code.error'),'agent account error');
            }
        }
        //用户注册的时候写入  洗码率
        // 启动事务
        $save = false;
        Db::startTrans();
        try {
            $this->model->save($data);
            UserSet::insert(['u_id' => $this->model->id, 'xima_lv' => get_config('app_user_xima')['value']]);
            // 提交事务
            $save = true;
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show([], 0, $e->getMessage());
        }
        //插入数据

        if (!$save) return show([], config('ToConfig.http_code.error'), 'network connection error');
        return show();
    }

    //退出
    public function sign_out()
    {
        session('home_user', '');
        show();
    }

    public function captcha()
    {
       $post = $this->request->post();
        //验证数据
        try {
            validate(validates::class)->scene('captcha')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        //验证签名
        $sign = md5('tyh'.$post['timestamp']);
        if ($sign != $post['sign']){
            show([], config('ToConfig.http_code.error'), 'network connection error');
        }
        $area_code = [855];

        if (!in_array($post['area_code'],$area_code)){
            show([], config('ToConfig.http_code.error'), 'this region is not supported');
        }

        if ($sign != $post['sign']){
            show([], config('ToConfig.http_code.error'), 'network connection error');
        }
        //验证号码是否注册过了的
        $find = $this->model->where('phone', $post['phone'])->find();
        if ($find) return show([], config('ToConfig.http_code.error'), 'mobile phone number already exists');
        return $this->shortMessage($post['area_code'].$post['phone']);
    }

    private function shortMessage(int $phone)
    {

//        //生成验证码  shortMessageConfigInfo
//        $captcha = rand(1000, 9999);
//        //存入redis
//        redis()->SADD('register_captcha', $captcha);
//        show(['captcha' => $captcha]);
        list($url, $post, $header) = ShortMessageConfig::shortMessageConfigInfo($phone);
        $sned = Curl::get($url, $post, $header);
        if (is_array($sned)){
            if ($sned['success'] == 1){
             return  show();
            }
        }
        return show($sned, config('ToConfig.http_code.error'),'error');
    }

}
