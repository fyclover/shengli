<?php


namespace app\controller\game;


use app\model\GameRecords;
use app\model\GameType;
use app\model\MoneyLog;
use app\model\UserCountModel;
use app\controller\Base;
use app\service\GameLogService;

class BetLog extends Base
{
    public static $page;
    public static $limit;
    public static $type;
    public static $start;
    public static $end;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        self::$page = $this->request->param('page', 1);
        self::$limit = $this->request->param('limit', 20);
        self::$type = $this->request->param('type', 0);//$type 1 今日，2 昨日 3 本周 4本月
        self::$start = $this->request->param('start', '');//开始时间
        self::$end = $this->request->param('end', '');//结束时间

        //开始时间和结束时间都不为空时才插入时间查询
        if (!empty(self::$start) && !empty(self::$end)) {
            self::$start .=' 00:00:00';
            self::$end .=' 23:59:50';
            self::$type = 0;
        }
    }

    //用户下注记录
    public function get_bet_log_list(): string
    {
        $model = GameRecords::alias('a');
        //获取时间查询表达式
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type);
        $list = $list->where('user_id', self::$user['id'])->where('close_status','in',[1,2]);
        $list = $list->join((new GameType())->name . ' b', 'a.game_type=b.id', 'left')
            ->field('a.*,b.type_name')
            ->order('id desc')
            ->paginate(['list_rows' => self::$limit, 'page' => self::$page], false)
            ->each(function ($item, $key) {
                $item->close_status_text = '';
                $item->gold = 0.00;
                $item->lz_result = GameRecords::lz_win_or_lose_calculation($item);
                if (strlen($item['detail']) > 5){
                    $item['detail'] =explode('||',$item['detail'])[0];
                }
                if (isset(GameRecords::$getCloseStatus[$item['close_status']])) {
                    return $item->close_status_text = GameRecords::$getCloseStatus[$item['close_status']];
                }

            });

        return show($list);
    }

    //用户后台上下分 出入金额
    public function get_money_in_and_out_log(): string
    {
        //查询用户上下分情况
        $model = new MoneyLog();
        $type = $this->request->post('status',0);
        //101 充值  201提现
        $string = '101,102,105,106';
        if ($type > 0) {
            $string = $type;
            if($type == '101'){
                $string = '101,105';
            }
            if($type == '102'){
                $string = '102,106';
            }
        }
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type,'create_time');
        $money = $list->where(['uid'=>self::$user['id']])
            ->where('status','in',$string)
            ->order('id desc')
            ->paginate(['list_rows' => self::$limit, 'page' => self::$page], false)
            ->each(function ($item, $key) {
                $item->type_status = $item->getData('status');
            });;
        return show($money);
    }

    //用户输赢统计
    public function get_user_money_count_log(): string
    {
        //用户输赢统计
        $model = new UserCountModel();
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type,'dates');
        $money =$list->where(['user_id'=>self::$user['id']])
            ->order('id desc')
            ->paginate(['list_rows' => self::$limit, 'page' => self::$page], false);

        $count_list = GameLogService::get_where_time_by((new GameRecords()), self::$start, self::$end, self::$type,'created_at');
        $bet_count = $count_list->where('user_id',self::$user['id'])
            ->where('close_status','in',[1,2])
            ->sum('bet_amt');

        $money_list = GameLogService::get_where_time_by((new MoneyLog()), self::$start, self::$end, self::$type,'create_time');
        $money_count = $money_list->where('uid',self::$user['id'])
            ->where('status','in',[501,502,503,504,505,506,507,508,509])
            ->sum('money');

        $count['count_bet_amt']= intval($bet_count);
        $count['count_win_amt']= intval($money_count);
        show(['data'=>$money,'count'=>$count]);
    }

    //用户资金流动记录
    public function get_money_by_log(): string
    {
        $status = $this->request->post('status', 0);
        $model = MoneyLog::alias('a');
        if ($status > 0) $model = $model->where('status', $status);
        //获取时间查询表达式
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type, 'create_time');

        $list = $list->where('uid', self::$user['id'])
            ->order('id desc')
            ->paginate(['list_rows' => self::$limit, 'page' => self::$page], false)
            ->each(function ($item, $key) {
                $item->type_status = $item->getData('type');
            });
        return show($list);
    }

    //统计输赢记录
    public function get_profit_by_log(): string
    {
        $model = MoneyLog::alias('a');
        if (self::$type <= 0 && empty(self::$end) && empty(self::$start)) {
            return show([], config('ToConfig.http_code.error'), '查询条件必填');
        }
        //获取时间查询表达式
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type, 'create_time');
        $list = $list->where('type', 1)
            ->whereOr('type', 2)
            ->field('type,SUM(money) AS sum_money')
            ->group('type')
            ->select();

        //格式化 type值
        if ($list) {
            foreach ($list as $key => &$value) {
                $list[$key]['type_id'] = $list[$key]->getData('type');
                $list[$key]['type_text'] = $list[$key]['type'];
            }
        }
        return show($list);
    }

    //统计用户下注记录 新版本的，增加， 免佣状态下，不能统计 开和局结果时候，如果压 庄闲 的流水
    public function get_bet_by_log(): string
    {
        $model = GameRecords::alias('a');
        //获取时间查询表达式
        $list = GameLogService::get_where_time_by($model, self::$start, self::$end, self::$type);
        // 开 和局 如果买 庄闲 不算流水
        $list = $list->where('user_id', self::$user['id'])->where('close_status','in',[1,2]);
        $profit = $list->field('sum(win_amt) as profit')->group('user_id')->find();
        $list = $list->where('is_exempt', 0);
        $water = $list->field('sum(shuffling_num) as water')->group('user_id')->find();

        //  新增调整 开始

        $money_list = GameLogService::get_where_time_by((new MoneyLog()), self::$start, self::$end, self::$type,'create_time');
        $money_count = $money_list->where('uid',self::$user['id'])
            ->where('status','in',[501,502,503,504,505,506,507,508,509])
            ->sum('money');
        // 新增调整 结束

        $result = [];
        // 调整 开启
        $result['profit'] = empty($money_count)?0:$money_count;
        // 调整 结束

        $result['water'] = empty($water)?0:$water->water;
        $result['date']=date('Y-m-d');
        return show($result);
    }
}