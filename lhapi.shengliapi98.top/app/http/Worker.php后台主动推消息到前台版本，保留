<?php
use Workerman\Worker;
use Workerman\Connection\TcpConnection;
use \Workerman\Lib\Timer;
use \app\service\CardDragonTigerService;

require_once __DIR__ . '/../../vendor/autoload.php';

// 初始化一个worker容器，监听1234端口
$worker = new Worker('websocket://0.0.0.0:2002');

/*
 * 注意这里进程数必须设置为1，否则会报端口占用错误
 * (php 7可以设置进程数大于1，前提是$inner_text_worker->reusePort=true)
 */
$worker->count = 1;
// worker进程启动后创建一个text Worker以便打开一个内部通讯端口
$worker->onWorkerStart = function($worker)
{
    // 开启一个内部端口，方便内部系统推送数据，Text协议格式 文本+换行符
    $inner_text_worker = new Worker('text://0.0.0.0:5678');
    $inner_text_worker->onMessage = function(TcpConnection $connection, $buffer)
    {
        // $data数组格式，里面有uid，表示向那个uid的页面推送数据
        $data = json_decode($buffer, true);
        $uid = $data['user_id'];
        // 通过workerman，向uid的页面推送数据
        $ret = sendMessageByUid($uid, $buffer);
        // 返回推送结果
        $connection->send($ret ? 'ok' : 'fail');
    };
    // ## 执行监听 ##
    $inner_text_worker->listen();


    Timer::add(1, function () use ($worker) {
        //获取台桌开牌信息
        $newOpen = new CardDragonTigerService();
        foreach ($worker->connections as $key => &$connection) {
            $data = isset($connection->data_info) ? $connection->data_info : '';
            //没有用户数据 直接退出
            // 上次通讯时间间隔大于心跳间隔，则认为客户端已经下线，关闭连接
            if (empty($data)) {
                continue;
            }


            //获取台卓信息 但台座有倒计时信息是 ，不存在开牌。redis存在当前台座倒计时的时候，查询当前还有多少倒计时
            $WorkerOpenPaiService = new \app\service\WorkerOpenPaiService();
            ## 1 存在倒计时的时候 tiger_table_set_start_signal_ 这个值存在
            if (redis()->get('table_set_start_signal_'.$data['table_id'])){
                $table_info['table_run_info'] = $WorkerOpenPaiService->get_table_info($data['table_id'],$data['user_id']);
                $connection->send(json_encode(['code' => 200, 'msg' => '成功','data'=>$table_info]));
                continue;
            }

            //没有扑克信息直接退出
            $pai_result = $newOpen->get_pai_info($data['table_id'], $data['game_type']);
            if (empty($pai_result)) {
                $connection->data_info = $data;
                ###  2 不存在倒计时的时候，只查询台座的信息
                if (redis()->get('worker_table_run_info_'.$data['table_id'])){
                    $table_info = json_decode(redis()->get('worker_table_run_info_'.$data['table_id']),true);
                }else{
                    //没有扑克信息，和 倒计时的时候，查询台座 运行状态 缓存30秒，30秒过后在查寻
                    $table_info['table_run_info'] = $WorkerOpenPaiService->get_table_info($data['table_id'],$data['user_id']);
                    if ($table_info['table_run_info']->end_time > 0 ){
                        redis()->set('table_set_start_signal_'.$data['table_id'],$data['table_id'],$table_info['table_run_info']->end_time);
                    }
                    redis()->set('worker_table_run_info_'.$data['table_id'],json_encode($table_info),30);
                }
                $connection->send(json_encode(['code' => 200, 'msg' => '成功','data'=>$table_info]));
                continue;
            }

            //获取派彩金额
            $pai_result['money'] = $newOpen->get_payout_money($data['user_id'], $data['table_id'], $data['game_type']);
            $pai_result['table_info'] = $data;
            ### 3 存在开牌信息的时候
            $connection->send(json_encode([
                'code' => 200, 'msg' => '成功',
                'data' => ['result_info'=>$pai_result,'bureau_number'=>bureau_number($data['table_id'])],
            ]));
            continue;
        }

    });


};
// 新增加一个属性，用来保存uid到connection的映射
$worker->uidConnections = array();
// 当有客户端发来消息时执行的回调函数
$worker->onMessage = function(TcpConnection $connection, $data)
{
    global $worker;
    static $request_count;
    // 业务处理略
    if (++$request_count > 10000) {
        // 请求数达到10000后退出当前进程，主进程会自动重启一个新的进程
        Worker::stopAll();
    }

    // 判断当前客户端是否已经验证,既是否设置了uid
    if(!isset($connection->uid))
    {
        $data = json_decode($data, true);
        //绑定uid
        $connection->uid = $data['user_id'];
        $connection->data_info = $data;
        $worker->uidConnections[$connection->uid] = $connection;
        if (!isset($data['user_id']) || !isset($data['table_id']) || !isset($data['game_type'])) {
            return $connection->send('连接成功，参数错误');
        }
        return $connection->send('连接成功');
        // 没验证的话把第一个包当做uid（这里为了方便演示，没做真正的验证）
        //$connection->uid = $data;
        /* 保存uid到connection的映射，这样可以方便的通过uid查找connection，
         * 实现针对特定uid推送数据
         */
       // $worker->uidConnections[$connection->uid] = $connection;
       // return;
    }
};

// 当有客户端连接断开时
$worker->onClose = function(TcpConnection $connection)
{
    global $worker;
    if(isset($connection->uid))
    {
        // 连接断开时删除映射
        unset($worker->uidConnections[$connection->uid]);
    }
};

// 向所有验证的用户推送数据
function broadcast($message)
{
    global $worker;
    foreach($worker->uidConnections as $connection)
    {
        $connection->send($message);
    }
}

// 针对uid推送数据
function sendMessageByUid($uid, $message)
{
    global $worker;
    if(isset($worker->uidConnections[$uid]))
    {
        $connection = $worker->uidConnections[$uid];
        $connection->send($message);
        return true;
    }
    return false;
}

// 运行所有的worker
Worker::runAll();

########################################################################
下面为 后台推结果模板
<?php
namespace app\controller;

use app\BaseController;
use app\service\WorkerOpenPaiService;
use think\facade\View;

class Index extends BaseController
{

    public function test()
    {

        $client = stream_socket_client('tcp://127.0.0.1:5678', $errno, $errmsg, 1);
// 推送的数据，包含uid字段，表示是给这个uid推送
        $data = array('user_id'=>123456, 'percent'=>'88%');
// 发送数据，注意5678端口是Text协议的端口，Text协议需要在数据末尾加上换行符
        fwrite($client, json_encode($data)."\n");
// 读取推送结果
        echo fread($client, 8192);
    }
}

########################################################################
    下面为前端模板

    ws = new WebSocket('ws://127.0.0.1:2002');
    ws.onopen =function (a){
        console.log(a)
        var message = {
            user_id: 123456,
            table_id: 12,
            game_type:6
        };
        ws.send(JSON.stringify(message));
    };
    ws.onclose = function (a){
        console.log('断开连接')
    };
    ws.onmessage =function (a) {
        console.log(a)
        console.log('收到客户端消息')

    }

